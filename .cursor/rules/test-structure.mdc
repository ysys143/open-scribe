---
description: 테스트 코드 구조 유지 및 모듈 추적을 위한 규칙
alwaysApply: false
---
# 테스트 코드 구조 유지 원칙

## 목적
테스트 코드를 작성할 때는 반드시 원래 소스 코드의 디렉토리 구조를 동일하게 유지해야 합니다. 이는 코드베이스의 구조가 변경되었을 때 어떤 테스트 파일이 어떤 모듈을 커버하는지 명확하게 추적하기 위함입니다.

## 구조 규칙

### 기본 구조
```
project/
├── src/
│   ├── module.py
│   ├── subpackage/
│   │   └── submodule.py
│   └── utils/
│       └── helper.py
└── test/
    ├── src/
    │   ├── module_test.py
    │   ├── subpackage/
    │   │   └── submodule_test.py
    │   └── utils/
    │       └── helper_test.py
```

### 적용 예시
현재 프로젝트 구조에 따른 테스트 코드 배치:

**소스 코드 구조:**
```
src/
├── cli.py
├── config.py
├── database.py
├── downloader.py
├── processors/
├── transcribers/
│   ├── base.py
│   ├── fallback.py
│   └── ...
├── tui/
│   ├── app.py
│   ├── screens/
│   ├── themes/
│   ├── utils/
│   └── widgets/
└── utils/
    ├── audio.py
    ├── file.py
    └── ...
```

**대응하는 테스트 코드 구조:**
```
test/
├── src/
│   ├── cli_test.py
│   ├── config_test.py
│   ├── database_test.py
│   ├── downloader_test.py
│   ├── processors/
│   ├── transcribers/
│   │   ├── base_test.py
│   │   ├── fallback_test.py
│   │   └── ...
│   ├── tui/
│   │   ├── app_test.py
│   │   ├── screens/
│   │   ├── themes/
│   │   ├── utils/
│   │   └── widgets/
│   └── utils/
│       ├── audio_test.py
│       ├── file_test.py
│       └── ...
```

## 구현 가이드라인

### 1. 테스트 파일 네이밍
- 테스트 파일은 `{module_name}_test.py` 형식으로命名
- 예: `cli.py` → `cli_test.py`
- 예: `audio.py` → `audio_test.py`

### 2. 디렉토리 구조 유지
- 소스 코드의 모든 서브디렉토리는 테스트 코드에서도 동일하게 유지
- 빈 `__init__.py` 파일도 테스트 디렉토리에 생성하여 패키지 구조 유지

### 3. 구조 변경 시 추적
- 리팩토링 시 테스트 파일도 동일한 구조로 이동
- 구조 변경 내역을 문서화하여 어떤 모듈이 어디로 이동했는지 추적 가능하도록 함

## 이점
1. **명확한 매핑**: 소스 파일과 테스트 파일의 1:1 대응 관계 유지
2. **리팩토링 안전성**: 구조 변경 시 누락되는 테스트 파일 방지
3. **커버리지 추적**: 특정 모듈의 테스트 커버리지 쉽게 파악
4. **유지보수성**: 코드 구조 변경 시 대응 테스트 파일 즉시 식별 가능